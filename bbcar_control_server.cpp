/*
 * Generated by erpcgen 1.10.0 on Sun May 28 16:55:50 2023.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "bbcar_control_server.h"
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
#include <new>
#include "erpc_port.h"
#endif
#include "erpc_manually_constructed.hpp"

#if 11000 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;

#if ERPC_NESTED_CALLS_DETECTION
extern bool nestingDetection;
#endif

ERPC_MANUALLY_CONSTRUCTED_STATIC(BBCarService_service, s_BBCarService_service);



// Call the correct server shim based on method unique ID.
erpc_status_t BBCarService_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory)
{
    erpc_status_t erpcStatus;
    switch (methodId)
    {
        case kBBCarService_stop_id:
        {
            erpcStatus = stop_shim(codec, messageFactory, sequence);
            break;
        }

        case kBBCarService_goStraight_id:
        {
            erpcStatus = goStraight_shim(codec, messageFactory, sequence);
            break;
        }

        case kBBCarService_turn_id:
        {
            erpcStatus = turn_shim(codec, messageFactory, sequence);
            break;
        }

        case kBBCarService_spin_id:
        {
            erpcStatus = spin_shim(codec, messageFactory, sequence);
            break;
        }

        case kBBCarService_start_id:
        {
            erpcStatus = start_shim(codec, messageFactory, sequence);
            break;
        }

        case kBBCarService_getDistance_id:
        {
            erpcStatus = getDistance_shim(codec, messageFactory, sequence);
            break;
        }

        case kBBCarService_getSpeed_id:
        {
            erpcStatus = getSpeed_shim(codec, messageFactory, sequence);
            break;
        }

        default:
        {
            erpcStatus = kErpcStatus_InvalidArgument;
            break;
        }
    }

    return erpcStatus;
}

// Server shim for stop of BBCarService interface.
erpc_status_t BBCarService_service::stop_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;


    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        stop();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kBBCarService_service_id, kBBCarService_stop_id, sequence);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for goStraight of BBCarService interface.
erpc_status_t BBCarService_service::goStraight_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t speed;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&speed);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        goStraight(speed);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kBBCarService_service_id, kBBCarService_goStraight_id, sequence);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for turn of BBCarService interface.
erpc_status_t BBCarService_service::turn_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t speed;
    double factor;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&speed);

    codec->read(&factor);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        turn(speed, factor);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kBBCarService_service_id, kBBCarService_turn_id, sequence);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for spin of BBCarService interface.
erpc_status_t BBCarService_service::spin_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t speed;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&speed);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        spin(speed);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kBBCarService_service_id, kBBCarService_spin_id, sequence);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for start of BBCarService interface.
erpc_status_t BBCarService_service::start_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;


    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        start();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kBBCarService_service_id, kBBCarService_start_id, sequence);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for getDistance of BBCarService interface.
erpc_status_t BBCarService_service::getDistance_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    double result;

    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = getDistance();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kBBCarService_service_id, kBBCarService_getDistance_id, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for getSpeed of BBCarService interface.
erpc_status_t BBCarService_service::getSpeed_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    double result;

    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        result = getSpeed();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kBBCarService_service_id, kBBCarService_getSpeed_id, sequence);

        codec->write(result);

        err = codec->getStatus();
    }

    return err;
}

erpc_service_t create_BBCarService_service(void)
{
    erpc_service_t service;

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    service = new (nothrow) BBCarService_service();
#else
    if (s_BBCarService_service.isUsed())
    {
        service = NULL;
    }
    else
    {
        s_BBCarService_service.construct();
        service = s_BBCarService_service.get();
    }
#endif

    return service;
}

void destroy_BBCarService_service(erpc_service_t service)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    erpc_assert(service != NULL);
    delete (BBCarService_service *)service;
#else
    (void)service;
    erpc_assert(service == s_BBCarService_service.get());
    s_BBCarService_service.destroy();
#endif
}

